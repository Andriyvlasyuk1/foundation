<?php
/**
 * Created by PhpStorm.
 * User: user
 * Date: 14.03.17
 * Time: 11:37
 */

namespace Drupal\advanced_form\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Mail\MailManagerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\Language\LanguageManagerInterface;

class Advanced_Form extends FormBase {

  /**
   * The mail manager.
   *
   * @var \Drupal\Core\Mail\MailManagerInterface
   */
  protected $mailManager;

  /**
   * The language manager.
   *
   * @var \Drupal\Core\Language\LanguageManagerInterface
   */
  protected $languageManager;

  /**
   * Constructs a new EmailExampleGetFormPage.
   *
   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
   *   The mail manager.
   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
   *   The language manager.
   */
  public function __construct(MailManagerInterface $mail_manager, LanguageManagerInterface $language_manager) {
    $this->mailManager = $mail_manager;
    $this->languageManager = $language_manager;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('plugin.manager.mail'),
      $container->get('language_manager')
    );
  }

  private $cities = [
    'ukraine' => [
      'kyiv' => 'Kyiv',
      'lutsk' => 'Lutsk',
      'lviv' => 'Lviv',
      'dnipro' => 'Dnipro',
    ],
    'europe' => [
      'berlin' => 'Berlin',
      'amsterdam' => 'Amsterdam',
      'paris' => 'Paris',
      'varshava' => 'Varshava',
    ],
  ];


  public function getFormId() {
    // TODO: Implement getFormId() method.
    return 'drupal_advanced_form';
  }


  public function buildForm(array $form, FormStateInterface $form_state) {
    // TODO: Implement buildForm() method.
    $form['first_name'] = [
      '#type' => 'textfield',
      '#title' => t('First Name'),
    ];
    $form['last_name'] = [
      '#type' => 'textfield',
      '#title' => t('Last name'),
    ];
    $form['more_info'] =[
      '#type' => 'checkbox',
      '#title' => t('More information'),
    ];
//    $form['email'] = [
//      '#type' => 'textfield',
//      '#title' => 'Send this to: '
//    ];
    $form['country'] = [
      '#type' => 'select',
      '#title' => t('Country'),
      '#options' => [
        'ukraine' => t('Ukraine'),
        'europe' => t('Europe'),
      ],
      '#states' => [
        'visible' => [
          ':input[name="more_info"]' => ['checked' => TRUE],
        ],
        'required' => [
          ':input[name="more_info"]' => ['checked' => TRUE],
        ],
      ],
      '#ajax' => [
        'callback' => '::cityCallback',
        'wrapper' => 'city-wrapper',
      ],
    ];

    $form['city_wrapper'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'city-wrapper',
      ],
    ];

    $form['address'] = [
      '#type' => 'textfield',
      '#title' => t('Address'),
      '#states' => [
        'visible' => [
          ':input[name="more_info"]' => ['checked' => TRUE],
        ],
        'required' => [
          ':input[name="more_info"]' => ['checked' => TRUE],
        ],
      ],
    ];

    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Save'),
    ];

    $form['#attached']['library'][] = 'advanced_form/advanced_form_js';

    return $form;
  }


  public function validateForm(array &$form, FormStateInterface $form_state) {
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }


  public function cityCallback(array &$form, FormStateInterface $form_state) {
    $country = $form_state->getValue('country');

    $form['city_wrapper']['city'] = [
      '#type' => 'select',
      '#title' => t('City'),
      '#options' => $this->cities[$country],
      '#states' => [
        'visible' => [
          ':input[name="more_info"]' => ['checked' => TRUE],
        ],
        'required' => [
          ':input[name="more_info"]' => ['checked' => TRUE],
        ],
      ],
    ];

    if ($country != "") {
      return $form['city_wrapper'];
    }
    else {
      $form['city_wrapper']['city'] = [];
      return $form['city_wrapper'];
    }
  }


  public function submitForm(array &$form, FormStateInterface $form_state) {
    // TODO: Implement submitForm() method.
//    $form_values = $form_state->getValues();
//
//    $module = 'advanced_form';
//    $key = 'contact_message';
//
//    $to = $form_values['email'];
//    $from = $this->config('system.site')->get('mail');
//
//    $params = $form_values;
//
//    $language_code = $this->languageManager->getDefaultLanguage()->getId();
//
//    $send_now = TRUE;
//
//    $result = $this->mailManager->mail($module, $key, $to, $language_code, $params, $from, $send_now);
//    if ($result['result'] == TRUE) {
//      drupal_set_message('Mail has been send');
//    }
//    else {
//      drupal_set_message('Mail was not send');
//    }
  }
}
